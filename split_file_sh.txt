#!/bin/bash

# File Splitter - Bash/Linux Version
# Splits files into smaller chunks with configurable parameters.
#
# Usage:
#   ./split_file.sh <file> [chunk_size] [output_dir]
#
# Examples:
#   ./split_file.sh video.mp4                    # Split with default 100KB chunks
#   ./split_file.sh document.pdf 50KB ./chunks  # Split with custom size and directory
#   ./split_file.sh data.bin 1MB                # Split with 1MB chunks

set -e  # Exit on any error

# Default values
DEFAULT_CHUNK_SIZE="100KB"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_info() { echo -e "${BLUE}INFO:${NC} $1"; }
print_success() { echo -e "${GREEN}SUCCESS:${NC} $1"; }
print_warning() { echo -e "${YELLOW}WARNING:${NC} $1"; }
print_error() { echo -e "${RED}ERROR:${NC} $1"; }

# Show usage information
show_usage() {
    echo "File Splitter - Bash Script"
    echo ""
    echo "Usage: $0 <file> [chunk_size] [output_dir]"
    echo ""
    echo "Arguments:"
    echo "  file        Path to the file to split (required)"
    echo "  chunk_size  Size of each chunk (default: ${DEFAULT_CHUNK_SIZE})"
    echo "              Supported formats: 100B, 50KB, 1MB, 2GB"
    echo "  output_dir  Output directory (default: same as input file)"
    echo ""
    echo "Examples:"
    echo "  $0 video.mp4                    # Split with default 100KB chunks"
    echo "  $0 document.pdf 50KB ./chunks  # Split with custom size and directory" 
    echo "  $0 data.bin 1MB                # Split with 1MB chunks"
    echo ""
    echo "To rejoin files, use: ./join_files.sh <pattern> [output_file]"
}

# Convert human-readable size to bytes
size_to_bytes() {
    local size_str="$1"
    
    # Remove spaces and convert to uppercase
    size_str=$(echo "$size_str" | tr -d ' ' | tr '[:lower:]' '[:upper:]')
    
    # Extract number and unit
    if [[ $size_str =~ ^([0-9.]+)([KMGT]?B?)$ ]]; then
        local number="${BASH_REMATCH[1]}"
        local unit="${BASH_REMATCH[2]}"
        
        # Default to bytes if no unit specified
        if [[ -z "$unit" || "$unit" == "B" ]]; then
            echo "${number%.*}"  # Remove decimal part
        elif [[ "$unit" == "KB" ]]; then
            echo $((${number%.*} * 1024))
        elif [[ "$unit" == "MB" ]]; then
            echo $((${number%.*} * 1024 * 1024))
        elif [[ "$unit" == "GB" ]]; then
            echo $((${number%.*} * 1024 * 1024 * 1024))
        elif [[ "$unit" == "TB" ]]; then
            echo $((${number%.*} * 1024 * 1024 * 1024 * 1024))
        else
            print_error "Invalid size unit: $unit"
            exit 1
        fi
    else
        print_error "Invalid size format: $size_str"
        print_info "Supported formats: 100B, 50KB, 1MB, 2GB"
        exit 1
    fi
}

# Format bytes to human readable
format_size() {
    local bytes=$1
    local units=("B" "KB" "MB" "GB" "TB")
    local unit_index=0
    local size=$bytes
    
    while [[ $size -ge 1024 && $unit_index -lt 4 ]]; do
        size=$((size / 1024))
        unit_index=$((unit_index + 1))
    done
    
    echo "${size}${units[$unit_index]}"
}

# Main splitting function
split_file() {
    local input_file="$1"
    local chunk_size_bytes="$2"
    local output_dir="$3"
    
    # Get file info
    local file_size=$(stat -f%z "$input_file" 2>/dev/null || stat -c%s "$input_file" 2>/dev/null)
    local file_name=$(basename "$input_file")
    
    print_info "Splitting '$file_name' ($(format_size $file_size)) into $(format_size $chunk_size_bytes) chunks..."
    
    # Create output directory if it doesn't exist
    mkdir -p "$output_dir"
    
    # Use split command with prefix
    local prefix="$output_dir/${file_name}.part"
    
    if command -v split >/dev/null 2>&1; then
        # Use split command (more efficient)
        split -b "$chunk_size_bytes" "$input_file" "$prefix"
        
        # Rename split files to have numeric extensions
        local counter=0
        for chunk_file in "$prefix"*; do
            if [[ -f "$chunk_file" && "$chunk_file" != *".part"[0-9]* ]]; then
                local new_name=$(printf "%s%04d" "$prefix" "$counter")
                mv "$chunk_file" "$new_name"
                print_success "Created: $(basename "$new_name") ($(format_size $(stat -f%z "$new_name" 2>/dev/null || stat -c%s "$new_name")))"
                counter=$((counter + 1))
            fi
        done
    else
        # Fallback: use dd command
        local counter=0
        local offset=0
        
        while [[ $offset -lt $file_size ]]; do
            local chunk_file=$(printf "%s%04d" "$prefix" "$counter")
            local remaining=$((file_size - offset))
            local current_chunk_size=$chunk_size_bytes
            
            if [[ $remaining -lt $chunk_size_bytes ]]; then
                current_chunk_size=$remaining
            fi
            
            dd if="$input_file" of="$chunk_file" bs="$current_chunk_size" skip=$((offset / current_chunk_size)) count=1 2>/dev/null
            
            print_success "Created: $(basename "$chunk_file") ($(format_size $(stat -f%z "$chunk_file" 2>/dev/null || stat -c%s "$chunk_file")))"
            
            counter=$((counter + 1))
            offset=$((offset + current_chunk_size))
        done
    fi
    
    # Create metadata file
    local metadata_file="$output_dir/${file_name}.meta"
    cat > "$metadata_file" << EOF
original_name=$file_name
original_size=$file_size
chunk_size=$chunk_size_bytes
total_chunks=$counter
created_date=$(date)
chunks=$(ls "$output_dir/${file_name}.part"* | xargs -n1 basename | tr '\n' ',' | sed 's/,$//')
EOF
    
    print_success "Split complete!"
    print_info "Created $counter chunks in: $output_dir"
    print_info "Metadata file: $metadata_file"
    
    return 0
}

# Parse command line arguments
if [[ $# -lt 1 || "$1" == "-h" || "$1" == "--help" ]]; then
    show_usage
    exit 0
fi

INPUT_FILE="$1"
CHUNK_SIZE="${2:-$DEFAULT_CHUNK_SIZE}"
OUTPUT_DIR="${3:-$(dirname "$INPUT_FILE")}"

# Validate input file
if [[ ! -f "$INPUT_FILE" ]]; then
    print_error "Input file not found: $INPUT_FILE"
    exit 1
fi

# Convert chunk size to bytes
CHUNK_SIZE_BYTES=$(size_to_bytes "$CHUNK_SIZE")

print_info "Input file: $INPUT_FILE"
print_info "Chunk size: $CHUNK_SIZE ($CHUNK_SIZE_BYTES bytes)"
print_info "Output directory: $OUTPUT_DIR"
print_info ""

# Perform the split
split_file "$INPUT_FILE" "$CHUNK_SIZE_BYTES" "$OUTPUT_DIR"