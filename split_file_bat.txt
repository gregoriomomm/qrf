@echo off
setlocal enabledelayedexpansion

REM File Splitter - Windows Batch Version
REM Splits files into smaller chunks with configurable parameters.
REM
REM Usage:
REM   split_file.bat <file> [chunk_size] [output_dir]
REM
REM Examples:
REM   split_file.bat video.mp4                      REM Split with default 100KB chunks
REM   split_file.bat document.pdf 50KB .\chunks    REM Split with custom size and directory
REM   split_file.bat data.bin 1MB                  REM Split with 1MB chunks

set DEFAULT_CHUNK_SIZE=100KB

REM Function to show usage
:show_usage
echo File Splitter - Windows Batch Script
echo.
echo Usage: %~nx0 ^<file^> [chunk_size] [output_dir]
echo.
echo Arguments:
echo   file        Path to the file to split (required)
echo   chunk_size  Size of each chunk (default: %DEFAULT_CHUNK_SIZE%)
echo               Supported formats: 100B, 50KB, 1MB, 2GB
echo   output_dir  Output directory (default: same as input file)
echo.
echo Examples:
echo   %~nx0 video.mp4                      REM Split with default 100KB chunks
echo   %~nx0 document.pdf 50KB .\chunks    REM Split with custom size and directory
echo   %~nx0 data.bin 1MB                  REM Split with 1MB chunks
echo.
echo To rejoin files, use: join_files.bat ^<pattern^> [output_file]
goto :eof

REM Function to convert size to bytes
:size_to_bytes
set size_str=%~1
set size_str=!size_str: =!
set size_str=!size_str:kb=KB!
set size_str=!size_str:mb=MB!
set size_str=!size_str:gb=GB!
set size_str=!size_str:tb=TB!

REM Extract number and unit
for /f "tokens=1,2 delims=KMGTB" %%a in ("!size_str!") do (
    set number=%%a
    set unit=%%b
)

REM Handle the case where unit is in the second part
if "!unit!"=="" (
    for /f "tokens=1 delims=0123456789." %%a in ("!size_str!") do set unit=%%a
    for /f "tokens=1 delims=KMGTB" %%a in ("!size_str!") do set number=%%a
)

REM Remove decimal points (simplified)
set number=!number:.=!

REM Convert to bytes
if "!unit!"=="" set unit=B
if /i "!unit!"=="B" (
    set bytes=!number!
) else if /i "!unit!"=="KB" (
    set /a bytes=!number! * 1024
) else if /i "!unit!"=="MB" (
    set /a bytes=!number! * 1024 * 1024
) else if /i "!unit!"=="GB" (
    set /a bytes=!number! * 1024 * 1024 * 1024
) else (
    echo ERROR: Invalid size unit: !unit!
    exit /b 1
)

set chunk_size_bytes=!bytes!
goto :eof

REM Function to format bytes to human readable
:format_size
set bytes=%~1
set /a kb=!bytes!/1024
set /a mb=!kb!/1024
set /a gb=!mb!/1024

if !gb! gtr 0 (
    echo !gb!GB
) else if !mb! gtr 0 (
    echo !mb!MB
) else if !kb! gtr 0 (
    echo !kb!KB
) else (
    echo !bytes!B
)
goto :eof

REM Main program
if "%~1"=="" goto show_usage
if "%~1"=="-h" goto show_usage
if "%~1"=="--help" goto show_usage

set INPUT_FILE=%~1
set CHUNK_SIZE=%~2
set OUTPUT_DIR=%~3

if "!CHUNK_SIZE!"=="" set CHUNK_SIZE=%DEFAULT_CHUNK_SIZE%
if "!OUTPUT_DIR!"=="" (
    for %%I in ("!INPUT_FILE!") do set OUTPUT_DIR=%%~dpI
)

REM Validate input file
if not exist "!INPUT_FILE!" (
    echo ERROR: Input file not found: !INPUT_FILE!
    exit /b 1
)

REM Convert chunk size to bytes
call :size_to_bytes "!CHUNK_SIZE!"
if errorlevel 1 exit /b 1

echo INFO: Input file: !INPUT_FILE!
echo INFO: Chunk size: !CHUNK_SIZE! (!chunk_size_bytes! bytes)
echo INFO: Output directory: !OUTPUT_DIR!
echo.

REM Create output directory if it doesn't exist
if not exist "!OUTPUT_DIR!" mkdir "!OUTPUT_DIR!"

REM Get file info
for %%I in ("!INPUT_FILE!") do (
    set file_name=%%~nxI
    set file_size=%%~zI
)

call :format_size !file_size!
set formatted_file_size=!errorlevel!

echo INFO: Splitting '!file_name!' into chunks...

REM Split the file using PowerShell (more reliable than pure batch)
powershell -Command "& {
    $inputFile = '!INPUT_FILE!'
    $chunkSize = !chunk_size_bytes!
    $outputDir = '!OUTPUT_DIR!'
    $fileName = '!file_name!'
    
    $buffer = New-Object byte[] $chunkSize
    $reader = [System.IO.File]::OpenRead($inputFile)
    $chunkNum = 0
    $totalSize = 0
    
    try {
        while (($bytesRead = $reader.Read($buffer, 0, $chunkSize)) -gt 0) {
            $chunkFileName = '{0}\{1}.part{2:D4}' -f $outputDir, $fileName, $chunkNum
            $chunkData = $buffer[0..($bytesRead-1)]
            [System.IO.File]::WriteAllBytes($chunkFileName, $chunkData)
            
            Write-Host ('SUCCESS: Created: {0} ({1} bytes)' -f (Split-Path $chunkFileName -Leaf), $bytesRead)
            $chunkNum++
            $totalSize += $bytesRead
        }
    }
    finally {
        $reader.Close()
    }
    
    # Create metadata file
    $metadataFile = '{0}\{1}.meta' -f $outputDir, $fileName
    $metadata = @(
        'original_name=!file_name!'
        'original_size=!file_size!'
        'chunk_size=!chunk_size_bytes!'
        'total_chunks=' + $chunkNum
        'created_date=' + (Get-Date)
        'chunks=' + ((0..($chunkNum-1)) | ForEach-Object { '{0}.part{1:D4}' -f '!file_name!', $_ }) -join ','
    )
    $metadata | Out-File -FilePath $metadataFile -Encoding UTF8
    
    Write-Host ''
    Write-Host 'SUCCESS: Split complete!'
    Write-Host ('INFO: Created ' + $chunkNum + ' chunks in: !OUTPUT_DIR!')
    Write-Host ('INFO: Metadata file: ' + $metadataFile)
}"

if errorlevel 1 (
    echo ERROR: Failed to split file
    exit /b 1
)

echo.
echo Operation completed successfully!
pause